import { AbstractIndex } from 'domain/index/AbstractIndex';
import { IndexType } from 'domain/index/IndexType';
import { NodeLabel } from 'domain/node/NodeLabel';

describe(`${AbstractIndex.name}`, () => {
  class TestIndex extends AbstractIndex {
    constructor(name: string | null) {
      super(new NodeLabel('Test'), ['p'], null, name);
    }

    protected getAutogeneratedName(): string {
      return 'autogen_name';
    }

    getIndexType(): IndexType {
      return 'btree';
    }
  }

  test.each([
    [new TestIndex('arbitrary_name'), 'arbitrary_name'],
    [new TestIndex(null), 'autogen_name'],
  ])('getName', (testIndex: TestIndex, expected: string) => {
    expect(testIndex.getName()).toBe(expected);
  });
});
